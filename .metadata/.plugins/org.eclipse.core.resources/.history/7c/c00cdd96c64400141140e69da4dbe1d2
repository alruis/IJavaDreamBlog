package controller;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpSession;

import model.Comentario;
import model.Entrada;
import model.Usuario;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import service.IComentarioService;
import service.IEntradaService;
import service.IUsuarioService;
import dao.IComentarioDao;
import dao.IEntradaDao;
import editor.FechaEditor;
import exception.AppServiceException;
import form.ComentarioForm;
import form.EntradaForm;
import form.UsuarioForm;

@Controller
public class BlogController {
	@Autowired
	private IUsuarioService usuarioService;
	@Autowired 
	private IEntradaService entradaService;
	@Autowired
	private IEntradaDao entradaDao;
	@Autowired
	private IComentarioDao comentarioDao;
	@Autowired 
	private IComentarioService comentarioService;
	
	
	
	@ModelAttribute("entradaForm")
	public EntradaForm getPersonaForm() {
		return new EntradaForm();
	}
	
	@ModelAttribute("comentarioForm")
	public ComentarioForm getComentarioForm() {
		return new ComentarioForm();
	}
	
	@InitBinder
	public void initBinder(WebDataBinder binder) {
		binder.registerCustomEditor(Date.class, new FechaEditor());
	}
	
	@ModelAttribute("usuarioForm")
	public UsuarioForm usuarioForm() {

		
		return new UsuarioForm();
	}
		
	@ModelAttribute("entradaForm")
	public EntradaForm entradaForm() {
		
		return new EntradaForm();
	}
	
	@RequestMapping("index")
	public String index(Model model) {
		inicializar(model);
		
		return "jsp/blog/index.jsp";
	}
	
	private void inicializar(Model model) {
		List<Entrada> entradas = null;
		try {
			entradas = entradaService.obtenerEntradas();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		// Pasar las personas a la vista
		model.addAttribute("entradas", entradas);
		
	}

	private List<String> validar(String correo, String clave) {
		List<String> errores = new ArrayList<String>();

		// TODO: Añadir regexp para el correo
		if (correo == null || correo.trim().equals(""))
			errores.add("Correo inválido");
		
		if (clave == null || clave.trim().equals(""))
			errores.add("Clave inválida");
		
		return errores;
	}
	
	private List<String> validar(UsuarioForm usuarioForm) {
		List<String> errores = new ArrayList<String>();
		
		// TODO: Validar correo con regexp
		if (usuarioForm.getCorreo() == null ||
				usuarioForm.getCorreo().trim().equals(""))
			errores.add("Correo inválido");

		if (usuarioForm.getClave() == null ||
				usuarioForm.getClave().trim().equals(""))
			errores.add("Clave inválida");
		
		if (usuarioForm.getConfirmacionClave() == null ||
				usuarioForm.getConfirmacionClave().trim().equals(""))
			errores.add("Clave de confirmación inválida");
		
		if (usuarioForm.getClave() != null && 
				usuarioForm.getConfirmacionClave() != null &&
				!usuarioForm.getClave().equals(usuarioForm.getConfirmacionClave()))
			errores.add("Clave de confirmación no corresponde con clave");
		
		if (usuarioForm.getFechaNacimiento() == null) 
			errores.add("Fecha de nacimiento inválida");

		return errores;
	}
	
	@RequestMapping("agregarUsuario")
	public String agregarUsuario(
			@ModelAttribute("usuarioForm") UsuarioForm usuarioForm,
			Model model, 
			HttpSession session) {
		
		List<String> errores = validar(usuarioForm);
		
		if (errores.size() <= 0) {
			Usuario u = new Usuario();
			u.setCorreo(usuarioForm.getCorreo());
			u.setClave(usuarioForm.getClave());
			u.setFechanacimiento(usuarioForm.getFechaNacimiento());
			u.setIdRol(1); //Rol de usuario standard
			
			try {
				usuarioService.agregarUsuario(u);
				session.setAttribute("usuario", u);
			} catch (AppServiceException e) {
				e.printStackTrace();
				errores.add("Error al insertar usuario: " + e.getMessage());
			}
		}
		
		if (errores.size() > 0) {
			model.addAttribute("errores", errores);
			return "forward:/jsp/blog/index.jsp";
		} else {
			return "redirect:/inicio.blog";
		}
	}
	
	@RequestMapping("inicio")
	public String inicio() {
		return "forward:/jsp/blog/inicio.jsp";
	}
	
	@RequestMapping("autenticar")
	public String autenticar(
			@RequestParam("correo") String correo,
			@RequestParam("clave") String clave,
			HttpSession session,
			Model model) {
		
		List<String> errores = validar(correo, clave);
		
		Usuario u = null;
		try {
			u = usuarioService.autenticar(correo, clave);
			
			if (u == null)
				errores.add("Usuario o clave inválida");
			else
				session.setAttribute("usuario", u);
		} catch (AppServiceException e) {
			e.printStackTrace();
			errores.add("Error al acceder a la BD: " + e.getMessage());
		}
		
		if (errores.size() > 0) {
			model.addAttribute("errores", errores);
			return "forward:/jsp/blog/index.jsp";
		} else {
			inicializar(model);
			return "forward:/jsp/blog/inicio.jsp";
		}
		
	}
	
	@RequestMapping("cerrarSesion")
	public String cerrarSesion(HttpSession session) {
		session.invalidate();
		return "redirect:/index.blog";
	}
	
	@RequestMapping("registrarUsuario")
	public String registrarUsuario() {
		return "forward:/jsp/blog/registro.jsp";
	}
		
	private List<String> validarEntrada(EntradaForm entradaForm) {
		List<String> errores = new ArrayList<String>();

		
		// TODO: Validar correo con regexp
		if (entradaForm.getCabeceraEntrada() == null ||
				entradaForm.getCabeceraEntrada().trim().equals(""))
			errores.add("No has puesto nada en la cabecera");

		if (entradaForm.getEntrada() == null ||
				entradaForm.getEntrada().trim().equals(""))
		errores.add("No has puesto nada en la entrada");

					
		return errores;
	}
		
	@RequestMapping("agregarEntrada")
	public String agregarEntrada(
			@ModelAttribute("entradaForm") EntradaForm entradaForm,
			Model model, 
			HttpSession session) {
		
		List<String> errores = validarEntrada(entradaForm);
		
		if (errores.size() <= 0) {
			Entrada ent = new Entrada();
			ent.setCabeceraEntrada(entradaForm.getCabeceraEntrada());
			ent.setEntrada(entradaForm.getEntrada());
			
			
			try {
				entradaService.agregarEntrada(ent);
				//TODO obtener entradas??
			} catch (AppServiceException e) {
				e.printStackTrace();
				errores.add("Error al insertar la entrada: " + e.getMessage());
			}
		}
		
		if (errores.size() > 0) {
			model.addAttribute("errores", errores);
			return "forward:/jsp/blog/index.jsp";
		} else {
			return "redirect:/inicio.blog";
		}
	}
		
	@RequestMapping("administrar")
	public String administrar(Model model,HttpSession session) {
		List<String> errores= new ArrayList<String>();
		Usuario u =  (Usuario) session.getAttribute("usuario");
		if(u!= null){
			inicializar(model);
			return "forward:/jsp/blog/inicio.jsp";
		}else{
			errores.add("No te has autenticado");
			model.addAttribute("errores", errores);
			return "forward:/index.blog";
		}
	
	
		
	}
	
	@RequestMapping("mostrar")
	public String mostrar(Model model, @RequestParam Integer idEntrada) {
		List<String> errores = new ArrayList<String>();
		
		EntradaForm entradaForm = getPersonaForm();
		try {
			Entrada ent = entradaService.obtenerEntrada(idEntrada);
			
			entradaForm.setIdEntrada(ent.getIdEntrada());
			entradaForm.setCabeceraEntrada(ent.getCabeceraEntrada());
			entradaForm.setEntrada(ent.getEntrada());
			entradaForm.setFechaCreacion(ent.getFechacreacion());
									
		} catch (Exception e) {
			errores.add("Error al consultar la entrada en BD");
			e.printStackTrace();
		}

		if (errores.size() > 0) {
			model.addAttribute("errores", errores);
		} 
		
		model.addAttribute("entradaForm", entradaForm);
		model.addAttribute("esModificar", true);
		inicializar(model);
		return "forward:/jsp/blog/inicio.jsp";
	}
		
	@RequestMapping("eliminar")
	public String eliminar(Model model, @RequestParam Integer idEntrada) {
		List<String> errores = new ArrayList<String>();
		
		try {
			
			// Busco la entrada
			Entrada ent = entradaDao.obtener(idEntrada);

			
			List<Comentario> comentarios = ent.getComentarios();
			if (comentarios != null) for (Comentario c : comentarios) 
				comentarioDao.eliminar(c.getIdcomentario());
						
			entradaService.eliminarEntrada(idEntrada);		
			
		} catch (Exception e) {
			errores.add("Error al eliminar la entrada en BD");
			e.printStackTrace();
		}

		if (errores.size() > 0) {
			model.addAttribute("errores", errores);
			
		} 
	
		inicializar(model);
		return "forward:/jsp/blog/inicio.jsp";
	}
		
	@RequestMapping("modificarEntrada")
	public String modificarEntrada(
			@ModelAttribute("entradaForm") EntradaForm entradaForm,
			Model model, 
			HttpSession session) {
		
		List<String> errores = validarEntrada(entradaForm);
		
		if (errores.size() <= 0) {
			Entrada ent = new Entrada();
			ent.setIdEntrada(entradaForm.getIdEntrada());
			ent.setCabeceraEntrada(entradaForm.getCabeceraEntrada());
			ent.setEntrada(entradaForm.getEntrada());
			ent.setFechacreacion(entradaForm.getFechaCreacion());
						
			
			try {
				entradaService.modificarEntrada(ent);
				return "redirect:/administrar.blog";
			} catch (AppServiceException e) {
				e.printStackTrace();
				errores.add("Error al insertar la entrada: " + e.getMessage());
			}
		}
		
		if (errores.size() > 0) {
			model.addAttribute("errores", errores);
			return "forward:/jsp/blog/index.jsp";
		} else {
			return "redirect:/inicio.blog";
		}
	}
	
	@RequestMapping("comentarios")
	public String indexComentarios(Model model,@RequestParam Integer idEntrada) {
			
		Entrada ent = null;
		List<Comentario> comentarios = null;
		
		try {
			ent = entradaService.obtenerEntrada(idEntrada);
			comentarios = ent.getComentarios();
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		model.addAttribute("entrada", ent);
		model.addAttribute("comentarios", comentarios);
	
		
		return "jsp/blog/comentarios.jsp";
	}
		
	@RequestMapping("agregarComentario")
	public String agregarComentario(
			@ModelAttribute("comentarioForm") ComentarioForm comentarioForm,
			Model model, 
			@RequestParam Integer idEntrada) {
		
			List<String> errores= new ArrayList<String>();
		
			Entrada ent = new Entrada();
			ent.setIdEntrada(idEntrada);
					
						
			Comentario c = new Comentario();
			c.setEntrada(ent);
			c.setComentario(comentarioForm.getComentario());
			
			
			try {
				comentarioService.agregarComentario(c);
				
				//TODO obtener entradas??
			} catch (AppServiceException e) {
				e.printStackTrace();
				errores.add("Error al insertar la entrada: " + e.getMessage());
			}

		
		if (errores.size() > 0) {
			model.addAttribute("errores", errores);
			return "forward:/jsp/blog/index.blog";
		} else {
			return "redirect:/index.blog";
		}
	}
		
	@RequestMapping("mostrarComentario")
	public String mostrarComentario(Model model, @RequestParam Integer idComentario) {
		List<String> errores = new ArrayList<String>();
		
		ComentarioForm comentarioForm = getComentarioForm();
		try {
			Comentario c = comentarioService.obtenerComentario(idComentario);
			
			comentarioForm.setIdComentario(c.getIdcomentario());
			comentarioForm.setComentario(c.getComentario());
			comentarioForm.setFechaCreacion(c.getFechacreacion());
			comentarioForm.setFechaactualizacion(c.getFechaactualizacion());
			comentarioForm.setIdusuario(c.getIdusuario()); 
			
									
		} catch (Exception e) {
			errores.add("Error al consultar el comentario en BD");
			e.printStackTrace();
		}

		if (errores.size() > 0) {
			model.addAttribute("errores", errores);
		} 
		
		model.addAttribute("comentarioForm", comentarioForm);
		model.addAttribute("esModificar", true);
		return "forward:/jsp/blog/comentarios.jsp";
	}
	
	@RequestMapping("actualizarComentario")
	public String actualizarComentario(	@ModelAttribute("comentarioForm") ComentarioForm comentarioForm,
			Model model, 
			HttpSession session,@RequestParam Integer idEntrada) {
		
		List<String> errores = new ArrayList<String>();
		
		Entrada ent = new Entrada();
		ent.setIdEntrada(idEntrada);
				
		
		Comentario c = new Comentario();
		c.setIdcomentario(comentarioForm.getIdComentario());
		c.setComentario(comentarioForm.getComentario());
//		c.setFechacreacion(comentarioForm.getFechaCreacion());
//		c.setFechaactualizacion(comentarioForm.getFechaactualizacion());
		c.setIdusuario(comentarioForm.getIdusuario());
		c.setEntrada(ent);
		
						
			
			try {
				comentarioService.modificarComentario(c);
				indexComentarios(model, idEntrada);
				//return "redirect:/administrar.blog";
			} catch (AppServiceException e) {
				e.printStackTrace();
				errores.add("Error al actualizar la entrada: " + e.getMessage());
			}
	
		
		if (errores.size() > 0) {
			model.addAttribute("errores", errores);
			return "forward:/jsp/blog/index.jsp";
		} else {
			return "redirect:/inicio.blog";
		}
	}
	
	
		
	
	
	
}


